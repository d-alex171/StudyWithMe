{"ast":null,"code":"var _s = $RefreshSig$();\nimport { getVenueMaker } from \"@mappedin/mappedin-js\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Declarative API to fetch Mappedin data using getVenueMaker\n */\nexport default function useVenue(options) {\n  _s();\n  // Store the venue object in a state variable\n  const [venue, setVenue] = useState();\n\n  // Fetch data asynchronously whenever options are changed\n  useEffect(() => {\n    let ignore = false;\n    const fetchData = async () => {\n      try {\n        console.log(\"[useVenueMaker] Fetching map with ID \\\"\".concat(options.mapId, \"\\\"\"));\n        const data = await getVenueMaker(options);\n        // Update state variable after data is fetched\n        if (!ignore) {\n          console.log(\"[useVenueMaker] Received map \\\"\".concat(data.venue.name, \"\\\"\"));\n          setVenue(data);\n        }\n      } catch (e) {\n        // Handle error\n        console.log(e);\n        setVenue(undefined);\n      }\n    };\n    fetchData();\n    return () => {\n      ignore = true;\n    };\n  }, [options]);\n\n  // Return the venue object\n  return venue;\n}\n_s(useVenue, \"/+0HXk0U3oQvQY3Fl65yjrto5Us=\");","map":{"version":3,"names":["getVenueMaker","useEffect","useState","useVenue","options","_s","venue","setVenue","ignore","fetchData","console","log","concat","mapId","data","name","e","undefined"],"sources":["/Users/lancesoliman/Downloads/StudyWithMe/src/hooks/useVenueMaker.ts"],"sourcesContent":["import {\n  getVenueMaker,\n  Mappedin,\n  TGetVenueMakerOptions\n} from \"@mappedin/mappedin-js\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Declarative API to fetch Mappedin data using getVenueMaker\n */\nexport default function useVenue(options: TGetVenueMakerOptions) {\n  // Store the venue object in a state variable\n  const [venue, setVenue] = useState<Mappedin | undefined>();\n\n  // Fetch data asynchronously whenever options are changed\n  useEffect(() => {\n    let ignore = false;\n    const fetchData = async () => {\n      try {\n        console.log(`[useVenueMaker] Fetching map with ID \"${options.mapId}\"`);\n        const data = await getVenueMaker(options);\n        // Update state variable after data is fetched\n        if (!ignore) {\n          console.log(`[useVenueMaker] Received map \"${data.venue.name}\"`);\n          setVenue(data);\n        }\n      } catch (e) {\n        // Handle error\n        console.log(e);\n        setVenue(undefined);\n      }\n    };\n    fetchData();\n\n    return () => {\n      ignore = true;\n    };\n  }, [options]);\n\n  // Return the venue object\n  return venue;\n}\n"],"mappings":";AAAA,SACEA,aAAa,QAGR,uBAAuB;AAC9B,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA,eAAe,SAASC,QAAQA,CAACC,OAA8B,EAAE;EAAAC,EAAA;EAC/D;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAuB,CAAC;;EAE1D;EACAD,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,GAAG,KAAK;IAClB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFC,OAAO,CAACC,GAAG,2CAAAC,MAAA,CAA0CR,OAAO,CAACS,KAAK,OAAG,CAAC;QACtE,MAAMC,IAAI,GAAG,MAAMd,aAAa,CAACI,OAAO,CAAC;QACzC;QACA,IAAI,CAACI,MAAM,EAAE;UACXE,OAAO,CAACC,GAAG,mCAAAC,MAAA,CAAkCE,IAAI,CAACR,KAAK,CAACS,IAAI,OAAG,CAAC;UAChER,QAAQ,CAACO,IAAI,CAAC;QAChB;MACF,CAAC,CAAC,OAAOE,CAAC,EAAE;QACV;QACAN,OAAO,CAACC,GAAG,CAACK,CAAC,CAAC;QACdT,QAAQ,CAACU,SAAS,CAAC;MACrB;IACF,CAAC;IACDR,SAAS,CAAC,CAAC;IAEX,OAAO,MAAM;MACXD,MAAM,GAAG,IAAI;IACf,CAAC;EACH,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;;EAEb;EACA,OAAOE,KAAK;AACd;AAACD,EAAA,CA/BuBF,QAAQ"},"metadata":{},"sourceType":"module"}